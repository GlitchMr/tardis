#!/usr/bin/alpha
use v6;
use Tardis;

# parse cmdline opts, instantiate a Tardis Debugger and run it
# masak++ parser goodness to go here
say "# Compiling '-e'...";

# for now we just give it an AST 
my Tardis::Debugger $t .= new(
    program => AST::Node::Statementlist.new(
        AST::Node::Assignment.new(
            AST::Node::Declaration.new(
                'my',
                AST::Node::Variable.new('$a')
            ),
            AST::Node::Literal.new(42)
        )
    )
);

say "# Running...";
$t.run;

my $current-tick = 0;
my @ticks = $t.ticks;
say "# Finished. Ticks: 0..", @ticks.end;

while defined(my $cmd = prompt '> ') {
    given $cmd {
        when /^ \s* $/       { }
        when 'look'          { look }
        when 'step'          { step() } 
        when 'n'             { step() }
        when /^go\s+(\d+)$/  { go(+$0) }
        when 'quit'          { quit() }
        when 'q'             { quit() }

        default              { say  "Sorry, unrecognized command." }
    }
}

# this just dresses up @ticks[$current-tick] and prints to STDOUT
sub look() {
    say '{';
    for @ticks[$current-tick].pad.variables -> $var {
        say sprintf '  %s = %s', $var.key, $var.value.perl;
    }
    say '}';
}

sub step() {
    if $current-tick == @ticks.end {
        say 'Can not go beyond last tick.';
        return;
    }
    ++$current-tick;
    look();
}

# RAKUDO: Should really be typed 'Int'.
sub go(Num $tick) {
    if $current-tick > @ticks.end {
        say 'Can not go beyond last tick.';
    }
    elsif $current-tick < 0 {
        say 'Ticks start at 0.';
    }
    else {
        $current-tick = $tick;
        look();
    }
}

sub quit() {
    exit;
}

